Аннотация

    В данной пояснительной  записке  рассматриваются  вопросы
реализации систем,  позволяющих эмулировать  среду  одной ЭВМ
на  другой,   на  примере  эмулятора  простой  вычислительной
системы на базе микропроцессора К580ВМ80А (ПЭВМ "Специалист")
в среде IBM PC.  Помимо эмулятора,  в  предлагаемый  комплект
инструментальных  средств  входит  кросс-транслятор  с  языка
ассемблера рассматриваемого микропроцессора, также рассчитан-
ный на работу в среде IBM PC.

    В записке  содержится  описание  архитектуры  эмулируемой
ЭВМ,  структуры программного комплекса, используемых алгорит-
мов и некоторых особенностей реализации комплекса в среде IBM
PC, а также руководства пользователя эмулятора и транслятора.

    К записке прилагаются исходные тексты программ комплекса:
системы эмуляции (SPECIAL.EXE) и кросс-транслятора (KASM.EXE),
а также дополнительные справочные материалы.





               Содержание


Введение       Краткая история возникновения проекта. . . . 3

Глава I        Архитектура ПЭВМ "Специалист". . . . . . . . 6

Глава II       Разработка эмулятора . . . . . . . . . . . .12

Глава III      Руководство пользователя эмулятора . . . . .19

Глава IV       Кросс-транслятор с языка ассемблера. . . . .25

Заключение      . . . . . . . . . . . . . . . . . . . . . .33

Приложение 1.  Список литературы. . . . . . . . . . . . . .34

Приложение 2.  Система команд микропроцессора К580ВМ80А . .35

Приложение 3.  Структура главного системного порта. . . . .38

Приложение 4.  Схема распределения памяти "Специалиста" . .39

Приложение 5.  Раскладка клавиатуры "Специалиста" . . . . .40

Приложение 6.  Набор тестовых программ для транслятора. . .41

Приложение 7.  Исходные тексты программ . . . . . . . . . .44





Введение

           Краткая история возникновения проекта.


    В 1987 г.  мастер производственного обучения  Волков А.Ф.
из города Днепродзержинска разработал собственную конструкцию
персонального компьютера  и назвал его  "Специалист".  Журнал
"Моделист - Конструктор" [1] посвятил ряд статей  этой разра-
ботке для того,  чтобы  каждый советский радиолюбитель  смог,
при желании, собрать это устройство у себя дома.
    Автор пошел  по пути максимального упрощения  и отказа от
сложной и дорогостоящей  электронной "начинки".  В компьютере
использованы дешевые  и наиболее доступные  микросхемы  серий
К155 и К580.
    Несмотря на  небольшие размеры  и относительную простоту,
компьютер умеет многое: решает математические задачи, рисует,
играет в шахматы и другие игры.  Благодаря публикации в [1] к
разработке программного обеспечения для "Специалиста" подклю-
чились профессионалы  и любители  со всех концов БСССР.  Этот
компьютер превосходит многие разработки такого же масштаба по
своим возможностям (см. таблицу 1).

                                                    Таблица 1

      Основные параметры радиолюбительских компьютеров

                             Специалист     Радио   Spectrum
        Параметр          базовая  новая     86РК    ZX-48K
                           версия  версия

  Микропроцессор                  К580ВМ80А           Z80A
  Тактовая частота, МГц      2.0      2.5     1.7      4.0
  Объем ОЗУ, КБайт            48      146      16       48
  Объем ПЗУ, КБайт          2-12       16       2       16
  Текстовый экран:
     символов в строке        64    48/64      64       32
     строк                    25    25/32      25       24
  Графический экран:                          нет
     разрешение по оси X     384      384              256
     разрешение по оси Y     256      256              192
     число цветов              2        8                8


    Цикл статей в  "Моделисте - Конструкторе"  продолжается и
сейчас.  Разработчики  обмениваются программами  и идеями  по
расширению  возможностей компьютера.  За прошедшие  несколько
лет "Специалист" научился общаться с внешним миром, используя
стандартные интерфейсы  (параллельный Centronix  и последова-
тельный RS-232),  стало возможным подключение принтеров и/или
других устройств ввода-вывода.
    Однако, разработка программного обеспечения на компьютере
"Специалист"  сопряжена  со  значительными  неудобствами  для
программиста  вследствие отсутствия  удобной  интегрированной
среды (IDE). Нет на "Специалисте"  и приличных трансляторов с
наиболее  употребительных языков программирования,  таких как
Си, Паскаль или Модула-2. Такие трансляторы просто невозможно
уместить в 64-х килобайтном  адресном пространстве процессора
вместе с исходными текстами программ  и местом для оттрансли-
рованного кода.

    Существуют два пути решения этих проблем:

       - увеличение  объема  ОЗУ  за счет  организации
           многостраничной памяти.
       - создание интегрированной среды и трансляторов
           с языков программирования для "Специалиста"
           на более  мощном  компьютере  и обеспечение
           обмена данными между ними.

    По первому пути  пошел  радиолюбитель  из города Москвы -
инженер Шелястин Ю.Н.  В новой версии "Специалиста" объем ОЗУ
увеличился более чем в три раза  за счет организации памяти в
три страницы.  Такой размер ОЗУ позволил улучшить графические
возможности  (восьмицветный режим  вместо монохромного).  Для
управления страницами ОЗУ  и видеорежимами  потребовался порт
вывода  -  и был реализован  на микросхеме  К580ВВ55А.  Общее
количество портов ввода-вывода увеличено ("Специалист" теперь
может управлять  двенадцатью  портами  вместо  трех),  причем
иерархическая организация  позволяет при необходимости добав-
лять порты просто установкой дополнительных микросхем-портов.
Немного увеличен  объем ПЗУ  (до 16 КБайт),  тактовая частота
(до 2.5 МГц). Кроме того, поддерживается полная совместимость
с базовой версией "Специалиста" (см. таблицу 1).
    Появилась необходимость в программах, умеющих работать со
всеми новыми аппаратными ресурсами  компьютера.  Так возникла
идея для учебно-исследовательской работы - создание эмулятора
ПЭВМ "Специалист" в среде IBM PC и разработка средств отладки
и тестирования программ для "Специалиста".

    За эту работу взялся  сплоченный коллектив  программистов
из группы К7-10а кафедры Системного Анализа (N28) Московского
Государственного Инженерно-Физического Института в составе:

   Покровский Д.А. - разработка транслятора  с  ассемблера
                     микропроцессора К580ВМ80А в среде IBM;

   Федотов М.И. - разработка среды отладчика, редактора
                  памяти,  взаимодействие с  MS-DOS для
                  хранения программ "Специалиста";

   Шелястин К.Ю. - разработка низкоуровневого ядра эмулятора,
                   средств отладки  и тестирования  программ
                   для ПЭВМ "Специалист".


    Для реализации проекта были выбраны следующие ЯП:

1. Ассемблер (Turbo Assembler V3.1) - для программирования
                                      низкоуровневого ядра;
2. Си (Borland C++ V3.1) - для остальных частей проекта.


    Программирование  проводилось  в удобной  интегрированной
среде (IDE) компилятора Borland C++ Version 3.1, облегчающего
написание и линковку ассемблерных модулей.





Глава I

               Архитектура ПЭВМ "Специалист"


    Данная глава является справочной и необходима для понима-
ния структуры вычислительной системы,  каковой является  ПЭВМ
"Специалист".  Если Вы  не собираетесь программировать работу
эмулируемой ПЭВМ  при помощи описываемого пакета программ, то
эту главу можно пропустить.

    Итак,  двухплатный  персональный  компьютер  "Специалист"
состоит из:
      - центрального процессора (ЦП),
      - постоянного запоминающего устройства (ПЗУ),
      - оперативного запоминающего устройства (ОЗУ),
      - интерфейса для связи с клавиатурой и другими
          внешними устройствами.

    Основные узлы (ЦП, ОЗУ, ПЗУ и интерфейсы) взаимодействуют
между собой посредством трех шин:
      - 16-разрядной шиной адреса,
      - 8-разрядной шиной данных,
      - шиной управления.
    Шина адреса обеспечивает  прямую адресацию памяти объемом
до 65536 байт и выборку до 256 устройств ввода-вывода.

    Центральный процессор К580ВМ80А -  однокристальный парал-
лельный 8-разрядный микропроцессор  с фиксированной  системой
команд.  ЦП тактируется импульсами частотой 2.5 МГц,  которые
вырабатываются синхрогенератором. Восьмиразрядное арифметико-
логическое устройство микропроцессора обеспечивает выполнение
арифметических и логических операций над двоичными данными, а
также обработку двоично-десятичных упакованных чисел.

    В состав блока регистров входят:

       - 16-разрядный регистр адреса команды (PC);
       - 16-разрядный регистр указателя стека (SP);
       - шесть 8-разрядных регистров общего назначения  (B,C,
           D,E,H,L), которые могут использоваться как три 16-
           разрядных регистра (BC,DE,HL);
       - 8-разрядный регистр результата (аккумулятор A);
       - регистр признаков,  содержащий пять битов признаков,
           которые  вырабатываются  в  результате  выполнения
           некоторых операций:
             S  -  бит знака,
             Z  -  бит нуля,
             AC -  бит вспомогательного переноса,
             C  -  бит переноса,
             P  -  бит четности.

    Распределение разрядов в регистре признаков:

          Номер бита   7  6  5  4  3  2  1  0
          Содержимое   S  Z  0 AC  0  P  1  C

    Система  команд  микропроцессора  состоит из  78  базовых
команд, которые можно разделить на шесть групп:

      - команды передачи данных;
      - арифметические команды;
      - логические команды;
      - команды переходов;
      - команды управления;
      - команды ввода-вывода.

    Формат команды  зависит от типа операции  и команды могут
быть одно-,  двух-  или трехбайтовыми.  Операнды команд могут
храниться в памяти или регистрах микропроцессора.  Для указа-
ния операнда в регистре используются регистровая  или неявная
регистровая адресация, для указания операнда в памяти - непо-
средственная, прямая, косвенная и стековая адресации.
    Полный список машинных команд микропроцессора  приведен в
приложении 2.  Для более детальной информации смотри [2].


    ПЗУ  объемом 16 КБайт  занимает  адресное  пространство с
C000h  по F7FFh.  ПЗУ реализовано  на  микросхемах  К573РФ2 с
ультрафиолетовым стиранием,  что позволяет  при необходимости
его перепрограммировать.

                                                    Таблица 2
          В ПЗУ хранится следующая информация:

    Адреса               Содержимое ПЗУ

 C000h - C7FFh  ПЗУ совместимости с базовой версией
                  (базовый ввод-вывод).

 C800h - CFFFh  Монитор - отладчик, позволяющий пользователю
                  редактировать содержимое ОЗУ; обмениваться
                  информацией с магнитофоном, используемым в
                  качестве внешней памяти; запускать приклад-
                  ные программы.

 D000h - D7FFh  Дизассемблер.

 D800h - DFFFh  Текстовый редактор.

 E000h - E7FFh  Знакогенератор.  По  этим  адресам  возможно
                  обращение к двум микросхемам ПЗУ, хранящим
                  описание  сиволов  разных форматов  (6*8 и
                  8*8 точек). Для переключения знакогенерато-
                  ров нужно изменить  значение старшего бита
                  в системном порту FF05h (см. приложение 3).

 E800h - EFFFh  Подпрограммы поддержки новых текстовых режи-
                  мов 25*48, 32*64 и 32*48 при 8 цветах.

 F000h - F7FFh  Программатор  ПЗУ К573РФ2,  позволяющий  при
                  наличии специального расширения интерфейса
                  перепрограммировать микросхемы ПЗУ.


    ОЗУ реализовано на микросхемах К565РУ5,  организованных в
три страницы.  Каждая страница расположена в начале адресного
пространства (0000h - BFFFh). Память по адресам C000h - FFFFh
не зависит  от выбора  страницы  в системном порту,  т.е этот
участок памяти  общий для всех  трех страниц.  Это необходимо
для организации доступа к данным, расположенным в любой стра-
нице ОЗУ,  и для осуществления переходов (передач управления)
сегментам программы во всех страницах ОЗУ. 

    В области  FF00h - FF3Fh расположены порты  ввода-вывода,
которые реализованы на микросхемах К580ВВ55, и, для упрощения
конструкции,  адресуются как ячейки памяти.  Оставшаяся часть
области F800h - FFFFh  представляет собой обычное ОЗУ,  общее
для всех трех страниц. В нем удобно организовывать стек и/или
хранить данные для передачи из страницы в страницу.

    Для хранения информации,  отображаемой на экране дисплея,
используется  часть  основной памяти  компьютера.   Это также
значительно упрощает конструкцию ПЭВМ.  В монохромных режимах
как  видеопамять используется  область основной  страницы  по
адресам 9000h - BFFFh.  В четырехцветном режиме  подключается
та же область из первой дополнительной страницы. Цвета в этом
режиме  определяются следующим образом:  установленный бит из
основной страницы при  сброшенном бите в дополнительной стра-
нице дает зеленый цвет точки, наоборот - красный цвет  точки,
два нулевых бита - черный цвет,  и два единичных бита - синий
цвет точки.  Как нетрудно догадаться,  в восьмицветном режиме
задействованы все три страницы.  Здесь цветообразование  идет
по общепринятым  принципам:  каждая страница  определяет одну
составляющую  цвета точки  (основная - зеленую,  1ая дополни-
тельная - красную и  2ая дополнительная - синюю).  Так как на
точку приходится три бита,  она может иметь  любой из  восьми
цветов:  черный, синий, зеленый, голубой, красный, малиновый,
желтый и белый.  В таблице 3 явно показаны эти преобразования
цветов.

                                                    Таблица 3
                Формирование цвета пикселя

  Содержимое видеостраницы             Видеорежим
 основной 1ой доп. 2ой доп.  Моно1   Моно2   4цвета  8цветов

    0        0        0      Синий  Черный   Черный  Черный
    0        0        1      Синий  Черный   Черный  Синий
    0        1        0      Синий  Черный   Красный Красный
    0        1        1      Синий  Черный   Красный Малинов.
    1        0        0      Белый  Зеленый  Зеленый Зеленый
    1        0        1      Белый  Зеленый  Зеленый Голубой
    1        1        0      Белый  Зеленый  Синий   Желтый
    1        1        1      Белый  Зеленый  Синий   Белый

    Из  содержимого  видеопамяти  в  компьютере  "Специалист"
формируются видеосигналы, которые можно подавать на входы RGB
любого монитора.  Специальная схема  формирует из них  полный
телевизионный сигнал,  который позволяет  использовать  любой
бытовой телевизор в качестве монитора.
    Все эти сведения об организации памяти ПЭВМ "Специалист"
обобщены в виде таблицы в приложении 4.


    Как уже было сказано, интерфейсы реализованы на микросхе-
мах К580ВВ55,  каждая из которых  обспечивает  ввод-вывод  по
24-м цифровым линиям,  т. е. поддерживает три 8-битных порта.
Порты с адресами FF00h,  FF01h,  FF02h и FF05h используются в
системе  для организации  взаимодействия с клавиатурой,  ОЗУ,
магнитофоном и динамиком для вывода звуковых сигналов.  Порты
FF04h, FF06h и FF08h - FF0Fh  свободны и соединены с разъема-
ми для подключения  внешних устройств.  Адреса  FF10h - FF3Fh
зарезервированы для  последующего  использования  в  качестве
портов. По этим адресам возможно подключение таких периферий-
ных микросхем,  как  контроллер  прерываний К580ВН59,  таймер
К580ВИ53, последовательный интерфейс К580ВВ51А и т.п.

    Для обмена данными с IBM PC  был использован  стандартный
последовательный интерфейс RS-232,  реализованный на "Специа-
листе" программно из нескольких бит  свободного параллельного
порта по адресу FF06h.  Эта идея  использования параллельного
интерфейса  в качестве последовательного заимствована из [3],
где она подробно описана. Посредством этого интерфейса на IBM
PC были переданы программы, содержащиеся в ПЗУ "Специалиста",
необходимые для тестирования разрабатываемого эмулятора.


    Сведения,  приведенные  в этой главе,  лишь вкратце  дают
понять,  что  из  себя  представляет  вычислительная система,
называемая "Специалист". Дальнейшее изложение покажет, как же
можно писать программы для ПЭВМ "Специалист"  в среде IBM PC,
и опишет, как был реализован эмулятор этой ПЭВМ.





Глава II

                Разработка эмулятора


    Упрощенная  схема  взаимодействия  отдельных  программных
модулей представлена на рисунке.  Далее дается краткое описа-
ние всех программных модулей.


 MAIN.C                     Инициализация эмулятора

 K580.ASM                   Ядро эмулятора

         COMMANDS.ASM       Выполнение команд К580ВМ80А

         PORTS.ASM          Эмуляция портов ввода-вывода

            KEYBOARD.ASM    Эмуляция клавиатуры

            VIDEOMOD.ASM    Эмуляция системного порта FF05h

               VGADAC.ASM   Управление палитрами EGA/VGA

 SCRLOCK.C                  Интерфейс с пользователем

         DRAW.C             Отрисовка частей экрана

              DISASSEM.C    Дизассемблирование команд

              OUTTEXT.ASM   Быстрый вывод сиволов

         MENU.C             Поддержка меню

              HELP.C        Справка, обработка ошибок

              HEXVIEW.C     Редактор памяти "Специалиста"

              DOSFILES.C    Работа с файлами DOS


    Модуль MAIN.C,  содержащий в том числе запускаемую первой
функцию main(), в основном занимается инициализацией системы:

      - резервирует  в куче память,  которая  будет  заменять
          собой  все адресное пространство  "Специалиста",  в
          случае нехватки свободной памяти  программа аварий-
          но завершается,  выдавая соответствующее сообщение.
          Для эмулятора необходимо около  200 КБайт  памяти в
          куче, плюс еще 50 КБайт для самой программы.

      - очищает память,  эмулирующую ОЗУ, и заполняет память,
          эмулирующую ПЗУ,  содержимым  ПЗУ,  которое  должно
          находится  в текущем каталоге  в файлах  ROM.DAT  и
          ROMZG.DAT.  Первый файл  содержит 12 КБайт, которые
          располагаются  по адресам  C000h - F7FFh,  а второй
          файл содержит  4 КБайта,  в  которых  записаны  два
          переключаемых  знакогенератора,   подставляемые  по
          адресам E000h - E7FFh.

      - проверяет строку  параметров запуска:  если был задан
          ключ 'DEBUG',  то устанавливает  флажок отладочного
          режима.

      - инициализирует графический экран в режиме 640*350 при
          16 цветах, при невозможности выдает соответствующее
          сообщение и завершается.

      - устанавливает регистры цветовых палитр EGA и VGA. Это
          необходимо для упрощения реализации цветовых  режи-
          мов "Специалиста".  Подробнее использование  палитр
          будет описано ниже.

      - производит начальную отрисовку экрана  (рамки окошек,
          строка меню,  изображение  экрана  эмулируемой ПЭВМ
          "Специалист").

      - запускает  ассемблерную  процедуру  холодного  старта
          эмулятора  (K580),  и,  дождавшись  ее  нормального
          завершения, возвращает управление DOS.


    Модуль K580  содержит  основной  цикл выполнения  команды
эмулируемого  процессора.  Здесь  происходит  дешифрация кода
команды и  для ее выполнения вызывается соответствующий фраг-
мент модуля COMMANDS.ASM,  содержащего  описание  всех команд
микропроцессора К580ВМ80А. Здесь же отлавливаются все попытки
записи в память/порты и чтения из портов. Это необходимо для:

     - учета изменений в видеопамяти  и отображения всех этих
         изменений на экране IBM PC;

     - запрещения записи  в область памяти,  где  расположено
         ПЗУ;

     - копирования изменений в "общем" ОЗУ во все три страни-
         цы, чтобы программе "Специалиста" казалось,  что ОЗУ
         по адресам F800h - FFFFh - общее (!);

     - обработки измененных значений портов  (этим занимаются
         сложные подпрограммы модуля PORTS.ASM, см.ниже);

     - подстановки на вход программе "Специалиста" динамичес-
         ки изменяющихся  данных  от устройств  ввода.  Такое
         устройство эмулируется лишь  одно - клавиатура.  См.
         ниже, описание модуля KEYBOARD.ASM.


    Модуль PORTS.ASM вызывается, если программа "Специалиста"
считывает или изменяет значение любого порта из области FF00h
- FF3Fh.  Если по какому-то из этих адресов нет порта (как по
адресам, большим FF0Fh),  то записать туда  ничего нельзя,  а
при чтении оттуда  всегда получается число 82h.  При работе с
существующими портами действия,  производимые модулем  PORTS,
зависят от назначения порта.  Обращения  к портам  клавиатуры
перенаправляются для обработки в модуль  KEYBOARD (см. ниже),
обращения к главному системному порту FF05h - в VIDEOMOD.ASM,
а некоторые обращения  к другим портам  обрабатываются  прямо
здесь.  Например, управление динамиком "Специалиста" произво-
дится модификацией  бита 5 порта FF02h.  При изменении  этого
бита программой "Специалиста"  модуль  PORTS  устанавливает в
аналогичное  состояние  бит  управления динамиком IBM.  Таким
образом сигнал, вырабатываемый "Специалистом", воспроизводит-
ся динамиком IBM.

    Модуль KEYBOARD.ASM получает управление всякий раз, когда
программа "Специалиста"  пытается прочитать содержимое портов
FF00h, FF01h и FF02h,  которые в схеме компьютера соединены с
матрицей  нормально разомкнутых контактов,  представляющей из
себя, собственно,  клавиатуру.  Процедуры модуля  анализируют
состояние буфера клавиатуры IBM PC и, если какие-либо клавиши
IBM  были нажаты  пользователем,  то соответствующие  разряды
вышеперечисленных портов  корректируются.  Программа "Специа-
листа",  получив значение из порта,  решит,  что  была нажата
клавиша на клавиатуре "Специалиста".
    К сожалению,  эта  клавиатура  совершенно  нестандартная.
Буквы на ней расположены  по  раскладке "ЙЦУКЕНГ", а  неалфа-
витные символы  практически в беспорядке.  Поэтому установить
понятное  и логичное соответствие клавиш  IBM и "Специалиста"
оказалось  невозможно.   Раскладка  клавиатуры  "Специалиста"
приведена в приложении 5, там же  указаны аналогичные клавиши
клавиатуры IBM.

    Модуль VIDEOMOD.ASM  занимается обработкой всех изменений
главного системного порта FF05h.  Структура этого порта пока-
зана в Приложении 3.  При переключении знакогенератора проис-
ходит копирование нужного набора символов, считанных из файла
ROMZG.DAT, в область ПЗУ E000h - E7FFh. При изменении страни-
цы ОЗУ  просто  изменяется  глобальный  указатель на сегмент,
используемый в качестве текущей страницы ОЗУ.
    Для отработки смены видеорежимов  найдено весьма интерес-
ное решение.  Если внимательно изучить  таблицу 3 (см. выше),
то  можно  сделать  следующий  вывод:  если запрограммировать
цветовую палитру видеоадаптера  (например, первые 8 цветов) в
соответствии  с каким-либо  режимом  из таблицы 3 (три бита в
левой части таблицы указывают номер цвета,  то на экране IBM-
компьютера  будет  правильное  изображение  картинки с экрана
"Специалиста". Естественно, это верно лишь в том случае, если
в видеопамяти IBM находится то же, что и в видеопамяти эмули-
руемого компьютера. Такое использование палитры позволяет при
записи байта  в видеопамять любой страницы  "Специалиста"  не
проверять видеорежим,  а просто копировать  этот байт  в один
цветовой слой видеопамяти EGA/VGA. Это гарантирует, что когда
программа "Специалиста" включит 8-цветный режим,  установится
8-цветная палитра  и не потребуется никакого  дополнительного
копирования данных из тех страниц ОЗУ,  которые не были ранее
отображены  на экране.  Вся 8-цветная картинка  засветится на
экране одновременно.
    Совершенно аналогично  реализовано гашение экрана  (бит 2
порта FF05h).  При сбросе этого бита все восемь цветов экрана
"Специалиста" устанавливаются в 0 (т.е. черный цвет). Изобра-
жение гаснет, как и требовалось. Впоследствии, когда потребу-
ется засветить экран, восемь регистров палитры будут загруже-
ны в соответствии с текущим видеорежимом.

    Все подпрограммы работы с палитрами  EGA/VGA содержатся в
модуле VGADAC.ASM.  Их назначение  должно быть ясно  из выше-
сказанного, а реализация описана во многих справочниках.


    Основное взаимодействие с пользователем  осуществляется в
модуле SCRLOCK.C.  В него  передается управление  из K580.ASM
перед выполнением каждой команды в следующих случаях:

      - пользователь нажал клавишу <Scroll Lock> для перехода
          в режим отладки (отсюда и название модуля);

      - был  установлен  флаг  пошагового  режима  (например,
          указанием параметра DEBUG в командной строке);

      - достигнута  требуемая точка  останова  (например, при
          выполнении подпрограммы за один шаг).

    При получении управления  модуль  SCRLOCK.C  отрисовывает
среду отладчика  (состояние микропроцессора, системного порта
FF05h) вызывая необходимые для этого  функции  модуля DRAW.C.
Чтобы отобразить  дизассемблированную программу "Специалиста"
в соответствующем окне, вызывается функция модуля DISASSEM.C.

    Таким образом, назначение модулей DISASSEM и DRAW ясно, а
их реализация не содержит ничего примечательного.

    На ранней стадии написания эмулятора для вывода текста на
экран использовались стандартные процедуры вывода, предостав-
ленные библиотеками  фирмы Borland International.  Оказалось,
что скорость выполнения этих процедур совершенно недостаточна
для реализации  частого  обновления  текстовой  информации на
графическом экране, что совершенно  необходимо при  пошаговом
прогоне программы "Специалиста".  Поэтому  пришлось  написать
подпрограмму быстрого  вывода символов  на графический экран.
Использование прямого доступа к видеопамяти  дало необходимый
выйгрыш во времени.  Эта и некоторые другие критичные по вре-
мени подпрограммы графического вывода вместе составили модуль
OUTTEXT.ASM.

    Для удобства пользователя  все функциональные возможности
эмулятора доступны через меню. Выпадающие (popup) меню произ-
вольного уровня вложенности  описаны в модуле MENU.C.  Там же
размещена  рекурсивная процедура  поддержки этих меню.  Такая
организация меню  очень удобна,  т.к. позволяет  очень быстро
изменить конфигурацию меню  и/или добавить туда новые возмож-
ности, которые отсутствуют в настоящей версии эмулятора.

    Как раз описанным образом  в систему были добавлены новые
возможности,  реализованные  в модулях HEXVIEW.C и DOSFILES.C
HEXVIEW - это модуль,  содержащий практически самостоятельный
редактор памяти,  позволяющий просматривать  и  редактировать
содержимое памяти (в виде шестнадцатиричных чисел или ASCII -
символов).  Это - наиболее примитивный способ ввести в память
программу для К580ВМ80А  (для этого надо знать  машинные коды
команд, приведенные в Приложении 2). Более реальный и удобный
способ - загрузить программу из дискового файла.  Эта возмож-
ность реализована в модуле DOSFILES.C.  Функции  этого модуля
обеспечивают  пользователю  возможность  задать имя  и путь к
файлу,  выбрать начальный  адрес  и размер  блока памяти  для
записи в файл или чтения из файла.  Например,  таким  образом
можно загрузить в память программу, созданную ранее с помощью
транслятора с ассемблера,  который  будет  подробно  описан в
следующих главах.

    Последний модуль эмулятора - HELP.C.  В него вошли разные
подпрограммы,  не вошедшие  в другие модули.  Это,  например,
процедура вывода мигающего курсора,   функция, осуществляющая
сброс эмулируемого компьютера,  подпрограмма вывода сообщения
для пользователя, команда меню "Справка", и т.п.





Глава III

              Руководство пользователя эмулятора

    Для начала  работы  с системой  требуется  запустить файл
SPECIAL.EXE.  Если конфигурация системы соответствует требуе-
мой,  эмулятор будет готов к работе.  При этом на экране воз-
никают четыре окна:

    - окно эмулируемой ЭВМ -  в нем  отображаются  результаты
      работы программ эмулируемой ЭВМ;
    - окно процессора,  отображающее текущее состояние микро-
      процессора К580ВМ80А;
    - окно дизассемблированного текста;
    - окно состояния главного системного порта FF05h.

    При  запуске  исполнимого файла  без параметров  эмулятор
входит  в режим эмуляции ПЭВМ "Специалист",  т.е. запускается
на выполнение подпрограмма начальной загрузки эмулируемой ЭВМ;
если же при запуске  указать  в качестве  параметра  ключевое
слово "debug",  система переходит  в режим  пошагового испол-
нения  команд эмулируемой ЭВМ (в режим отладки).

   Интегрированная среда эмулятора предоставляет пользователю
следующие возможности:

    - Просмотр  и  редактирование  содержимого ОЗУ  (любой из
      трех страниц),  портов устройств ввода-вывода и регист-
      ров микропроцессора К580ВМ80А.

    - Работа  в режиме  эмулируемого компьютера  "Специалист"
      (окно  "Экран  эмулируемого  компьютера")  с поддержкой
      всех возможностей данного ПК.

    - Работа  с двоичными файлами,  содержащими  машинный код
      МП  К580ВМ80А  и  хранящимися  на  внешних  накопителях
      MS DOS (чтение, запись и выполнение).

    - Трассировка программ,  хранящихся в ОЗУ  (как с обходом
      подпрограмм, так и с заходом в них).

    - Дизассемблирование  двоичных файлов  и фрагментов ОЗУ и
      ПЗУ.

    - Изменение опций (цвета, звук) интегрированной среды.

    - Начальная загрузка эмулируемого компьютера.

    - Получение справки о программе и ее создателях.

	- Выход из системы.


    Работа с эмулятором

    Большинство функций системы  доступно через главное меню.
Оно вызывается на экран по нажатию клавиши F1 в режиме отлад-
ки (так как в режиме эмуляции вся клавиатура IBM PC,  за иск-
лючением клавиши ScrollLock,  отображается на клавиатуру эму-
лируемой ЭВМ).  Ниже  перечислены  пункты и подменю  главного
меню:

    - Файлы - работа с внешними файлами

        - Путь		- задание рабочего каталога
        - Прочитать	- прочитать  файл  из  рабочего  каталога
        - Записать	- записать фрагмент ОЗУ на диск в рабочий
                          каталог в виде двоичного файла

    - Регистры		- изменение  текущего содержимого регист-
                          ров микропроцессора К580ВМ80А
 
    - Память		- просмотр  и редактирование  содержимого
                          ОЗУ  ПЭВМ "Специалист"  (в шестнадцати-
                          ричном либо текстовом формате)

    - Сброс	        - очистка ОЗУ и начальная установка реги-
                          стров (имитация холодного старта эмули-
                          руемой ЭВМ)

    - Опции             - изменение параметров системы

       	- Системные цвета       - выбор палитры для системных
                                  цветов
            - Палитра 1	        - выбор палитры 1
            - Палитра 2	        - выбор палитры 2
            - Палитра 3	        - выбор палитры 3

	- Эмуляция звука        - разрешить/запретить подачу
                                  звуковых сигналов эмулиру-
                                  емой ЭВМ
            - Включить
            - Отключить

Эмулятор обрабатывает нажатия следующих управляющих клавиш:

   - В режиме пошагового исполнения (отладки):

     F1 (Меню)      - вызов основного меню на экран

     F2 (Шаг)       - выполнение команды, на которую указыва-
                      ет регистр счетчика команд (регистр РС).
                      Если текущая команда  является командой
                      вызова подпрограммы, происходит переход
                      на первую команду подпрограммы

     F3 (Процедура) - выполнение команды, на которую указыва-
                      ет регистр счетчика команд (регистр РС).
                      Если текущая команда  является командой
                      вызова  подпрограммы,  эта подпрограмма
                      выполняется без трассировки; после воз-
                      врата из подпрограммы режим трассировки
                      возобновляется
     Scroll Lock
     (Запустить)	- переход в режим эмуляции

	 F9 (Справка)	- получение справки о времени создания
                      программы и ее авторах

     F10 (Выход)	- выход из среды эмулятора

    Таким образом, в режиме отладки эмулятор позволяет:

        - осуществлять пошаговое исполнение программ эмулиру-
          емой ЭВМ с просмотром их ассемблерного кода
        - изменять содержимое регистров эмулируемого процес-
          сора
        - записывать на диск и считывать с диска фрагменты
          ОЗУ эмулируемой ЭВМ
        - редактировать ОЗУ эмулируемой ЭВМ.


   - В режиме эмулируемого компьютера:

     Scroll Lock
     (Запустить)    - переход в режим пошагового исполнения

     Вся остальная клавиатура IBM PC в этом режиме  отобража-
     ется на клавиатуру  ПЭВМ "Специалист",  т.е.  нажатия на
     клавиши транслируются  и заносятся в соответствующую об-
     ласть памяти эмулируемой ПЭВМ. Таким образом,  работа  с
     эмулятором  в режиме эмуляции сводится  к работе с прог-
     раммами эмулируемой ЭВМ в окне эмуляции. По нажатию кла-
     виши ScrollLock эмулятор переходит в режим пошагового
     исполнения (режим отладки).


    Работа с редактором памяти

    При входе в редактор  (выбором пункта "Память"  основного
меню системы)  на экране появляется окно редактора,  где ото-
бражается содержимое текущей страницы ОЗУ в шестнадцатиричном
и текстовом представлении.

    С помощью  клавиш,  описанных  ниже,  пользователь  может
перемещаться по текущей странице ОЗУ, изменять ее содержимое,
а также переключаться на другие страницы. Смена текущей стра-
ницы в редакторе памяти не оказывает влияния на текущую стра-
ницу ОЗУ эмулируемой ЭВМ.

    Следует отметить, что в эмулируемой ЭВМ область адресного
пространства C000h - FFFFh является общей для всех трех стра-
ниц, и поэтому все изменения, вносимые в эту область в какой-
либо странице, будут продублированы в двух оставшихся.

     Редактор памяти обрабатывает следующие управляющие
клавиши:

     Клавиши управления   - перемещение по текущей странице
     курсором		        ОЗУ (с прокруткой)

     Ctrl+<Влево>       - переход к следующему байту в памяти
                          (в шестнадцатиричном режиме)

     Ctrl+<Вправо>      - переход к предыдущему байту в памяти
                          (в шестнадцатиричном режиме)

     Home               - переход к концу текущей строки
     End                - переход к началу текущей строки

     Ctrl+Home          - переход в левый верхний угол экрана
     Ctrl+End           - переход в правый нижний угол экрана

     PageUp             - смещение по памяти на страницу вверх
     PageDn             - смещение по памяти на страницу вниз

     Ctrl+PageUp	    - переход на начало текущей страницы
                          ОЗУ (на адрес 0000h)
     Ctrl+PageDn        - переход в конец текущей страницы
                          ОЗУ

     Tab                - переключение между шестнадцатиричным
                          и текстовым форматами представления
                          памяти

     F1                 - вызов меню для смены текущей стра-
                          ницы ОЗУ

     Esc                - выход из редактора памяти

     В текстовом режиме нажатие любой другой клавиши приводит
     к записи ее ASCII-кода в текущую ячейку памяти.  В шест-
     надцатиричном режиме с той же целью необходимо использо-
     вать клавиши '0'..'9' и 'A'..'F'.

    Меню  редактора  памяти  используется  для  смены текущей
страницы ОЗУ. Это меню содержит следующие пункты:

     - Основная              - перейти  к работе  в  основной
                               странице ОЗУ
     - 1-я дополнительная    - перейти к работе  в первой до-
                               полнительной странице ОЗУ
     - 2-я дополнительная    - перейти к работе во второй до-
                               полнительной странице ОЗУ

     Смена текущей страницы в редакторе памяти никак не отра-
жается на текущей странице эмулируемой ЭВМ.





Глава IV

                Кросс-транслятор с языка ассемблер
                    микропроцессора К580ВМ80А

    В качестве  одного из элементов  данного интегрированного
комплекса предполагалось разработать кросс-транслятор с языка
ассемблер  микропроцессора К580ВМ80А  для  IBM PC-совместимых
компьютеров с целью максимально упростить разработку програм-
много обеспечения  для эмулируемой ПЭВМ - ведь не секрет, что
достаточно  скудные аппаратные ресурсы  8-битных ЭВМ  создают
немалые препятствия для программиста. С другой стороны,  сов-
ременные IBM PC-совместимые компьютеры обладают производитель-
ностью, вполне достаточной для решения подобных задач.  Этими
причинами и обусловлен тот факт, что данный подход,  а именно
создание кросс-трансляторов,  уже давно находит свое примене-
ние в мире вычислительной техники.

    Следует отметить,  что предлагаемый транслятор  может ис-
пользоваться  для  разработки   программного  обеспечения  не
только для рассматриваемой ПЭВМ "Специалист", но и вообще для
любой ЭВМ, созданной на основе микропроцессора,  совместимого
по системе команд  с процессором К580ВМ80А,  в частности  для
систем с процессором Zilog 80. Среди таких ЭВМ можно выделить
такие популярные во всем мире компьютеры, как Yamaha MSX и ZX
Spectrum, а также многочисленные восьмибитные игровые телеви-
зионные приставки. В нашей стране из машин данного типа широ-
ко известны  такие компьютеры,  как  "Микроша", "Радио-86РК",
"ЮТ-88"  и  многие другие.  Таким образом,  системы на основе
данного микропроцессора  остаются  популярными и по сей день,
и число их  довольно  велико.  Следовательно,  можно уверенно
рассчитывать на то, что предлагаемый транслятор будет пользо-
ваться немалым спросом среди широкого круга любителей.

    Предлагаемая  программа  реализована  в  виде автономного
исполнимого модуля на языке C++. Модуль рассчитан на исполне-
ние в операционной системе MS-DOS,  но,  поскольку программы,
написанные  на  языке  C++  и  использующие  его  стандартные
системные  вызовы,  как  правило,  обладают  высокой степенью
переносимости,  он может быть оттранслирован  и будет успешно
работать на любой платформе, имеющей транслятор с языка C++.

    Для  запуска  транслятора из командной строки  необходимо
ввести следующее:

         C> kasm <имя-файла>

    Транслятор   выполнит   ассемблирование  файла  с  именем
<имя-файла> и запишет полученный двоичный код в файл с именем
IMAGE.BIN. Если транслятор обнаружит ошибки,  их список будет
выведен на экран  с указанием строки,  в которой была найдена
ошибка. При этом файл IMAGE.BIN создан не будет.

    При  запуске  транслятора  без  параметров  будет  выдано
сообщение, описывающее способ использования программы.

    Структура программы

    Данная программа реализована  в виде  следующих файлов на
языке C++:

 Файл ASM.CPP    Главный файл программы.  Содержит подпро-
                 граммы, необходимые  для  синтаксического
                 анализа  текста   ассемблерной  программы
                 и генерации двоичного кода,  средства ди-
                 агностики ошибок, а также средства файло-
                 вого ввода/вывода.

 Файл ASM.H      Заголовочный файл для файла ASM.CPP.

 Файл HTABLE.CPP Содержит реализацию класса "хэш-таблица".
		 Хзш-таблица используется  в качестве хра-
                 нилища меток и EQU-определений ассемблер-
                 ной программы.

 Файл HTABLE.H	 Заголовочный файл для файла HTABLE.CPP.
		 Содержит описание класса "хэш-таблица".

 Файл ERRORS.CPP Содержит  подпрограммы  вывода  на  экран
		 сообщений об ошибках,  фатальных  ошибках
		 и  предупредительных сообщений,  а  также
		 сами сообщения.

 Файл ERRORS.H	Заголовочный файл для файла ERRORS.CPP.
		Содержит константы, используемые для ссыл-
                ки на конкретное сообщение об ошибке.


    Требования к ассемблерному тексту

    Ассемблерный текст,  поступающий на вход программе, трак-
туется ею как последовательность строк следующего формата:

[ws][<label>[ws]:[ws]][<opcode>ws[<operands>]][ws][;<comment>]

где:

    ws (white space) - разделитель, в данном случае табуляция
                       или пробел

    <label>          - имя метки  (в имени  допустимы  буквы,
                       цифры и некоторые специальные символы,
                       при этом цифры в начале имени недопус-
                       тимы)

    <opcode>         - ассемблерная мнемоника  кода операции.
                       Список мнемоник см. в Приложении 2. В
                       этом поле также могут  находиться  так
                       называемые псевдооперации (см. ниже)

    <operands>	     - операнды для команды, указанной в пре-
                       дыдущем поле

    <comment>	     - комментарий до конца строки

    (Квадратные скобки означают необязательность параметра.)

    Как следует из вышеприведенного шаблона строки,  в тексте
    допустимы:

	    - пустые строки;
	    - строки, состоящие из одного комментария;
	    - строки, состояшие из одной метки;
	    - строки, состоящие из одной команды со своими
              операндами;
	    - все комбинации вышеперечисленных строк.

    При этом считаются недопустимыми  строки,  в которых при-
сутствуют две или более меток или же две или более команд.

    Транслятор  обрабатывает строки  не длиннее  127 символов
(считая разделители и комментарии).  Как правило, для ассемб-
лерных программ  этого достаточно  вследствие  ограниченности
длины команд. Если транслятор обнаруживает строку длиннее 127
символов, строка усекается  и на экран выдается соответствую-
щее предупредительное сообщение.

    Признаком конца ассемблерного текста  может являться клю-
чевое слово END. При этом оно не обязательно должно находить-
ся в конце файла - в этом случае весь текст после этого слова
будет проигнорирован. В случае отсутствия слова END весь файл
просматривается до конца.

    Помимо  ассемблерных  мнемоник,  программа распознает ряд
так называемых псевдоопераций, а именно DB, DW, DS, ORG и EQU.
Их синтаксис приводится ниже.

		DB	<list_of_bytes>
		DW	<list_of_words>

    Эти две операции используются для записи в память восьми-
и шестнадцатибитных констант соответственно. Список этих кон-
стант задается в виде чисел, символьных констант или символи-
ческих имен, разделенных запятыми. Для записи в память строки
символов можно также записать ее в качестве одной из констант,
заключив ее  в двойные кавычки  (такие строки  обе эти псевдо-
операции трактуют одинаково).

		DS	<integer>

    Эта псевдооперация резервирует в памяти число байт,  ука-
занное в поле операнда.  Содержимое этих ячеек  перед началом
работы оттранслированной программы не определено.

		ORG	<integer>

    Псевдооперация ORG указывает транслятору, с какого адреса
предполагается размещение в памяти оттранслированной програм-
мы при запуске ее на целевой ЭВМ. Она необходима для коррект-
ного перевода  символических  имен  меток  в адреса  и должна
встречаться в тексте программы до первой команды и до первого
объявления метки. Отсутствие псевдооперации ORG в тексте про-
граммы  эквивалентно  команде  ORG  0.  Псевдооперация ORG не
записывает никакого кода в выходной файл.

<label> :	EQU	<integer>

    Псевдооперация EQU присваивает имени метки,  предшествую-
щей ей,  значение,  указанное в поле <integer>.  Впоследствии
эту метку можно будет использовать  в качестве целочисленного
операнда.  (В принципе,  в качестве  целочисленного  операнда
можно использовать любую метку,  так  как  значение метки, не
связанной с псевдооперацией EQU, считается равным адресу,  по
которому эта метка была определена.) Эта псевдооперация также
не записывает никакого кода в выходной файл.


    Принцип работы программы

    В ходе трансляции входного текста транслятор последовате-
льно просматривает его строки,  анализирует  их  и генерирует
соответствующий двоичный код, записывая его в выходной файл.

    В предлагаемом трансляторе реализован синтаксический ана-
лизатор,  принимающий на вход текстовую строку формата,  опи-
санного в предыдущем подразделе.  Выделение отдельных элемен-
тов строки производится  путем поиска  в ней  соответствующих
разделительных символов (для выделения метки - ':', для отде-
ления мнемоники от операндов - пробела или табуляции).  Обра-
ботка соответствующих элементов производится последовательно,
по мере их выделения.

    В данной реализации трансляция происходит в два прохода:

 На первом проходе  транслятор распознает метки  и записывает
 соответствующие  им  адреса  в хэш-таблицу.  Для корректного
 вычисления  адресов  меток  транслятор распознает  мнемоники
 ассемблерных  команд  и вычисляет длину  соответствуюшего им
 двоичного кода.  При этом  распознавание операндов команд не
 требуется, так как  в системе команд данного микропроцессора
 длина команды в машинном коде не зависит от ее операндов. На
 этом этапе в выходной файл ничего не записывается  и сообще-
 ния об ошибках не генерируются (кроме фатальных ошибок).

 На втором проходе  транслятор  игнорирует метки,  распознает
 ассемблерные мнемоники и операнды, генерируя соответствующий
 им двоичный код и  записывая его в выходной файл.  При этом,
 если   в качестве операнда команды указывается символическое
 имя, транслятор производит его поиск в хэш-таблице и подста-
 вляет  в команду значение этого имени.  На этом этапе  могут
 возникать  сообщения об ошибках  и предупредительные сообще-
 ния.

    Обработка  мнемоник  ассемблерных  команд  осуществляется
следующим образом:

 Производится  поиск  по имени команды в таблице команд.  Для
 ускорения поиска  таблица проиндексирована  по первой букве.
 Затем управление  передается  на один из двенадцати обработ-
 чиков операндов  в зависимости от типа команды.  Нужно отме-
 тить,  что по типу и способу кодировки операндов все команды
 данного микропроцессора  можно условно разделить на 12 групп
 - например, команды, не требующие операндов,  команды,  тре-
 бующие 8-битовую константу и т.п. В данной реализации каждой
 такой группе соответствует свой обработчик, которому переда-
 ется часть входной строки,  оставшаяся после обработки имени
 команды.  Каждый такой обработчик  пытается выделить из этой
 строки операнды команды  и возвращает  в вызывающую подпрог-
 рамму от 1 до 3 байт двоичного кода,  соответствующего коди-
 ровке  прочитанных им  операндов  для данной группы  команд.
 Вызывающая  подпрограмма  корректирует  этот код  (а именно,
 добавляет  к первому байту кода  так называемый  базовый код
 уже  конкретной  команды)  и записывает его  в выходной файл
 (вызывающей подпрограмме известна  длина машинного кода  для
 каждой группы команд).


    Виды поддерживаемых констант

    Для команд и псевдоопераций,  требующих в качестве одного
из аргументов восьми- или шестнадцатибитную константу, допус-
тимы следующие виды констант:

    - Знаковое целое, записанное в десятичной системе.

    - Знаковое целое, записанное в двоичной системе
      (признак - буква b, непосредственно следующая за после-
      дней цифрой).

    - Знаковое целое,  записанное в шестнадцатиричной системе
      (признак - буква h, непосредственно следующая за после-
      дней цифрой). Если число начинается с шестнадцатиричной
      цифры A..F, то перед ней необходимо поставить цифру 0.

    - Символьная константа, состоящая из одного или двух сим-
      волов, заключенных в апострофы.

    - Символ $, равный адресу строки, в которой он расположен.

    - Имя метки. Его значением является адрес строки, в кото-
      рой метка была определена.

    - Имя EQU-определения.  Его значением является константа,
      записанная в соответствующем EQU-определении.

    Если команде,  требующей восьмибитную константу,  указать
операнд,  не помещающийся в один байт,  будет выдано соответ-
ствующее предупредительное сообщение.


	Как проводилось тестирование

    После длительного обдумывания  были установлены следующие
основные требования, предъявляемые к этапу тестирования:

    - Тесты должны проверять корректность  работы транслятора
      со всеми строками, соответствующими указанному в специ-
      фикации формату.

    - Тесты должны проверять правильность  работы  всех обра-
      ботчиков операндов (в частности, корректность генериру-
      емых ими адресов).

    - Тесты должны проверять корректность работы системы диа-
      гностики ошибок.

    - Тесты должны позволять исследовать  поведение системы в
      экстремальных ситуациях (тест на фатальные ошибки).

    Для  реализации  всех перечисленных этапов  были написаны
три тестовых файла TEST1.ASM, TEST2.ASM и SNAKE.ASM.  Все эти
файлы,  а также распечатки состояния экрана  после трансляции
этих файлов приводятся в приложении 6.





Заключение

   С начала 80-х  годов,  когда  на  Западе  появились первые
персональные компьютеры, в сердцах  и  душах советских радио-
любителей горел неугасимый огонь - они  тоже  хотели  пользо-
ваться преимуществами этих чудо - машин.  Однако министерство
радиоэлектронной промышленности  долгие  годы  не  шло им на-
встречу - до 1986 года  на территории бывшего СССР не сущест-
вовало промышленного  производства бытовых ЭВМ, поэтому появ-
ление в журнале "Моделист - Конструктор" схемы "Специалиста",
а  в  магазине  "Электроника"  -  компьютера  БК-0010-01 было
встречено со  всеобщим ликованием.  До начала  90-х годов эти
ЭВМ - "Микроша", "БК", "Радио - 86", "ЮТ - 88", "МИКРО - 80",
"Специалист", "Вектор", "Корвет", "Spectrum ZX-48"  и  многие
другие, в большинстве своем самодельного изготовления - оста-
вались единственными БЫТОВЫМИ компьютерами.  По  этой причине
радиолюбители-программисты всей душой прикипели к своим само-
делкам.  Сейчас даже  IBM PC дома -  не редкость, но эти люди
до сих пор меняются  программами  (магнитофонными!!!), обсуж-
дают какие -  то свои проблемы  и ни за что не променяют свои
"букашки" на новомодные "Денди", "Кенги", и прочие "Битманы".
Да, в общем-то они  и правы, поскольку тот же "Специалист" по
большинству параметров превосходит многие игровые приставки.
    Из  вышесказанного,  очевидно,  следует,  что  полезность
нашего программного  комплекса трудно  переоценить;  действи-
тельно,  сплав мощных  возможностей  IBM,  с одной стороны, и
копеечной стоимости эмулируемого компьютера с другой является
громадным подспорьем  в  работе любому программисту,  так как
значительно  облегчает процесс написания  и отладки программ-
ного обеспечения  простых бытовых  ЭВМ,  и  мы  от  всей души
надеемся на то,  что он  в  скором времени будет пользоваться
заслуженной  популярностью  в  среде  радиолюбителей-програм-
мистов,  имеющих доступ  к  ЭВМ типа  IBM PC, и разработчиков
игрового и системного ПО для подобных бытовых компьютеров.





Приложение 1

                   Список литературы:


     1.  "Моделист - Конструктор", 1987, NN 2,3,5,6,7.

     2.  "Микропроцессоры и микропроцессорные комплекты
             интегральных микросхем", справочник.

     3.  "Радио", 1987, NN 4,7;  1989, NN 4,6.

     4.  Б. Страуструп "C++".

     5.  С.О.Бочков, Д.М.Субботин, "Язык программирования Си
             для персонального компьютера"





Приложение 2

          Система команд микропроцессора К580ВМ80А.


   Команда       Код операции  Число байтов, циклов, тактов

  ACI  data        11001110              2       2        7
  ADC  r/m         10001r/m              1     1/2      4/7
  ADD  r/m         10000r/m              1     1/2      4/7
  ADI  data        11000110              2       2        7
  ANA  r/m         10100r/m              1     1/2      4/7
  ANI  data        11100110              2       2        7
  CALL addr        11001101              3       5       17
  Ccnd addr        11cnd100              3     3/5    11/17
  CMA              00101111              1       1        4
  CMC              00111111              1       1        4
  CMP  r/m         10111r/m              1     1/2      4/7
  CPI  data        11111110              2       2        7
  DAA              00100111              1       1        4
  DAD  rs          00rs1001              1       3       10
  DCR  r/m         00r/m101              1     1/3     5/10
  DCX  rs          00rs1011              1       1        5
  POP  rp          11rp0001              1       3       10
  PUSH rp          11rp0101              1       3       11
  RAL              00010111              1       1        4
  RAR              00011111              1       1        4
  RET              11001001              1       3       10
  Rcnd             11cnd000              1     1/3     5/11
  RLC              00000111              1       1        4
  RRC              00001111              1       1        4
  RST  num         11num111              1       3       11
  SBB  r/m         10011r/m              1     1/2      4/7
  SBI  data        11011110              2       2        7
  SHLD addr        00100010              3       5       16
  SPHL             11111001              1       1        5
  STA  addr        00110010              3       4       13
  STAX r           000r0010              1       2        7
  STC              00110111              1       1        4
  SUB  r/m         10010r/m              1     1/2      4/7
  SUI  data        11010110              2       2        7
  XCHG             11101011              1       1        4
  XRA  r/m         10101r/m              1     1/2      4/7
  XRI  data        11101110              2       2        7
  XTHL             11100011              1       5       18
  DI               11110011              1       1        4
  EI               11111011              1       1        4
  HLT              01110110              1       1        7
  IN   port        11011011              2       3       10
  INR  r/m         00r/m100              1     1/3     5/10
  INX  rs          00rs0011              1       1        5
  JMP  addr        11000011              3       3       10
  Jcnd addr        11cnd010              3       3       10
  LDA  addr        00111010              3       4       13
  LDAX r           000r1010              1       2        7
  LHLD addr        00101010              3       5       16
  LXI  rs,data16   00rs0001              3       3       10
  MOV  r/m,r/m     01r/mr/m              1     1/2      5/7
  MVI  r/m,data    00r/m110              2     2/3     7/10
  NOP              00000000              1       1        4
  ORA  r/m         10110r/m              1     1/2      4/7
  ORI  data        11110110              2       2        7
  OUT  port        11010011              2       3       10
  PCHL             11101001              1       1        5

  Примечания:
      1. data   - 8-битный непосредственный операнд.
      2. data16 - 16-битный непосредственный операнд.
      3. port   - 8-битный номер порта ввода-вывода.
      4. addr   - адрес ячейки памяти.
      5. r/m    - номер 8-битного регистра:
                    000=B, 001=C, 010=D, 011=E,
                    100=H, 101=L, 110=M, 111=A,
                  где M - ячейка памяти, адрес которой в HL.
      6. rs     - номер 16-битного регистра:
                    00 = BC, 01 = DE, 10 = HL, 11 = SP.
      7. rp     - номер 16-битного регистра:
                    00 = BC, 01 = DE, 10 = HL, 11 = PSW,
                  где PSW - аккумулятор, объединенный с
                  регистром признаков.
      8. r      - номер 16-битного регистра:
                    0 = BC, 1 = DE.
      9. num    - целое число от 0 до 7.
     10. cnd    - обозначение условий для переходов:
                    000 = NZ, 001 =  Z, 010 = NC, 011 = C,
                    100 = PO, 101 = PE, 110 =  P, 111 = M.





Приложение 3

           Структура главного системного порта.

    Адрес порта - FF05h
    Назначение битов:

  7  6  5  4  3  2  1  0

                          Видеорежим: 11 - Монохромный 1
                                           (Сине-белый)
                                      10 - Монохромный 2
                                           (Черно-зеленый)
                                      01 - 4-цветный
                                           (Красный, синий,
                                           зеленый, черный)
                                      00 - 8-цветный (RGB)

                          Гашение экрана
                                       1 - зажечь
                                       0 - погасить

                          Выбор страницы ОЗУ:
                                      11 - основная
                                      10 - 1ая дополнительная
                                      01 - 2ая дополнительная
                                      00 - не используется

                          Не используются

                          Выбор знакогенератора:
                                       1 - размер символа 6*8
                                       0 - размер символа 8*8





Приложение 4

         Схема распределения памяти ПЭВМ "Специалист"

 FFFFh
                Общее ОЗУ (192 байта)
 FF40h
 FF3Fh          Порты ввода - вывода
 FF00h
 FEFFh
                Общее ОЗУ (1792 байта)

 F800h
 F7FFh          ПЗУ: Программатор микросхем К573РФ2.
 F000h
 EFFFh          ПЗУ: Подпрограммы поддержки новых
 E800h                 текстовых режимов.
 E7FFh          ПЗУ: Знакогенератор.
 E000h
 DFFFh          ПЗУ: Текстовый редактор.
 D800h
 D7FFh          ПЗУ: Дизассемблер.
 D000h
 CFFFh          ПЗУ: Монитор - отладчик.
 C800h
 C7FFh          ПЗУ: Базовый ввод-вывод (клавиатура,
 C000h                 дисплей, магнитофон.
 BFFFh
                ОЗУ: Экранная область.
                     (три видеостраницы)
 9000h
 8FFFh
                ОЗУ: Для прикладных программ.
                        (три страницы)




 0000h
 Страницы:  Основная  1ая дополнительная  2ая дополнительная





Приложение 5

             Раскладка клавиатуры "Специалиста"



F1   F2   F3   F4   F5   F6   F7   F8   F9   []   []   []

 ;    1    2    3    4    5    6    7    8    9    0    -
 +    !    "    #    $    %    &    '    (    )         =
    Й    Ц    У    К    Е    Н    Г    Ш    Щ    З    Х    :
    J    C    U    K    E    N    G    [    ]    Z    H    *
      Ф    Ы    В    А    П    Р    О    Л    Д    Ж    Э    .
      F    Y    W    A    P    R    O    L    D    V    \    >
         Я    Ч    С    М    И    Т    Ь    Б    Ю    ,    /   ЗБ
         Q    ^    S    M    I    T    X    B    @    <    ?    _
  НР    РУС                 ТАБ   ПРОБЕЛ        ДУП       ПС   ВК
        ЛАТ


          Соответствующие клавиши клавиатуры IBM PC


F1   F2   F3   F4   F5   F6   F7   F8   F9   Ins  Del  F10

 ~    !    @    #    $    %    ^    &    *    (    )    _
 `    1    2    3    4    5    6    7    8    9    0    -
    Q    W    E    R    T    Y    U    I    O    P    {    }
    Й    Ц    У    К    Е    Н    Г    Ш    Щ    З    [    ]
      A    S    D    F    G    H    J    K    L    ;    '    |
      Ф    Ы    В    А    П    Р    О    Л    Д    Ж    Э    \
         Z    X    C    V    B    N    M    ,    .    +    ?   BS
         Я    Ч    С    М    И    Т    Ь    Б    Ю    =    /
 Shift  Pg  Home            Tab    Space        End       Pg
        Up                                                Dn





Приложение 6

           Тестовые файлы для транслятора

Файл	TEST1.ASM

Охватывает все типы операндов
Использует все допустимые виды констант
Транслируется без ошибок

--------------------------- TEST1.ASM -------------------------------
;;		This is a K580 assembler program
;;		used to test the KASM translator.

;;	All the commands below should be OK.
;;	They cover all argument types.

	org	1000h

var1:	equ	2000

label1:
	nop		; no args
	add	c	; RM8_1
	inr     c	; RM8_2
	adi	10	; DATA8
	rst	7	; 0..7
	dad	b	; R16_1 (B, D, H, SP)
	push	psw	; R16_2 (B, D, H, PSW)
label2:
	lda	1000	; ADR16
	mov	a,m	; RM8_RM8
	mvi	a,10	; RM8_IMM
	lxi	h,1000	; R16_IMM (decimal)
	lxi	h,1000b	;   ---   (binary)
	lxi	h,0FFFFh;   ---   (hexadecimal)
	lxi	h,'MZ'	;   ---   (character)
	lxi	h, $	;   ---   (the $ symbol)
	lxi	h, var1	;   ---   (EQU definition)
	ldax	d	; RADR
	jmp	label2	; a thoughtful comment


data1:	db	0, 'A', "aaa"	; 00 41 61 61 61
data2:	dw	0FFFFh, 'zz'	; FF FF 7A 7A
data3:	ds	10		; 10 undefined bytes

end
---------------------------------------------------------------------

Состояние экрана после трансляции файла TEST1.ASM

------------------------------ Экран --------------------------------
K580 Assembler   Version 1.0   Copyright (c) 1994 Dmitry Pokrovsky

Input file:	test1.asm
Output file:	IMAGE.BIN


Successful assembly
---------------------------------------------------------------------



Файл	TEST2.ASM

Генерируются все возможные ошибки и предупреждения

------------------------------- TEST2.ASM ---------------------------
;;	Here are some lines with some errors in them.
;;	They were written to debug error messages.

label1:
la^bel:			; '^' is not a valid character for a label.
label1:			; This label has already been defined.
	burp		; There is no such opcode.
	nop	you	; NOP does not require any arguments.
	inr	z	; There is no such register.
	rst	100	; Valid values are 0..7
	mvi	a,zero	; 'zero' has not been defined.
	db	'a' '0'	; The comma between 'a' and '0' is missing.
	mov	m,m	; There is no such operation.
	lxi	h,labl1	; There is no such label.
	lxi	b,'AAA'	; The character constant is too long.
	equ	1000	; EQU needs a label.
	db	"...	; Not a valid string.
	org	1000h	; ORG must be at the start.
	mvi	a,1000	; 1000 does not fit into a byte.
			; A warning will be generated.

; ***** This is a rather long line which exceeds the size of the read buffer (128 bytes, in fact) and therefore will be truncated.

end
---------------------------------------------------------------------


Состояние экрана после трансляции файла TEST2.ASM

------------------------------ Экран --------------------------------
K580 Assembler   Version 1.0   Copyright (c) 1994 Dmitry Pokrovsky    
                                                                      
Input file:     test2.asm                                             
Output file:    IMAGE.BIN                                             
                                                                      
### Error in line 5: invalid character in label                       
### Error in line 6: label has already been defined                   
### Error in line 7: invalid opcode                                   
### Error in line 8: extra characters in line                         
### Error in line 9: register name expected                           
### Error in line 10: extra characters in line                        
### Error in line 11: undefined symbol                                
### Error in line 12: comma expected                                  
### Error in line 13: invalid combination of opcode and operands      
### Error in line 14: undefined symbol                                
### Error in line 15: character constant must be one or two bytes long
### Error in line 16: invalid usage of EQU directive                  
### Error in line 18: misplaced ORG                                   
### Warning in line 19: conversion may lose significant digits        
### Warning in line 22: line too long - truncated                     
                                                                      
There are some errors!                                                
---------------------------------------------------------------------





Приложение 7

           Исходные тексты программ


Ассемблерные модули (.ASM):                   1652 Lines,  50845 Bytes
       K580, COMMANDS, PORTS, KEYBOARD,
       VIDEOMOD, VGADAC, OUTTEXT, CPU.INC

Сишные модули (.C):
       MENU, DISASSEM, SCRLOCK, MAIN           560 Lines,  19533 Bytes
       DATABUF.H                               184 Lines,   7809 Bytes
Еще сишные модули (.C):
       DRAW, DOSFILES, HELP, HEXVIEW           938 Lines,  29004 Bytes
                                       ------------------------------
                                       Total: 3320 Lines, 107191 Bytes
