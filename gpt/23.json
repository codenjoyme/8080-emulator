DATE: 1733233703481

===============================================================================================
Q: У меня есть JS файл мне надо сделать точную копию делающую это на java
"""
/*
 * Элемент  Размер, байт
 * Ракорд (нулевые байты)   256
 * Синхробайт (E6h)         1
 * Начальный адрес в ОЗУ    2
 * Конечный адрес в ОЗУ     2
 * Данные   (конечный адрес - начальный адрес + 1)
 * Ракорд (нулевые байты)   2
 * Синхробайт (E6h)         1
 * Контрольная сумма        2
 * 0 0 0 0 0 svo: pad with some zeroes in the end
 */
TapeFormat.prototype.nekrosha = function(mem, org, name) {
    var data = new Uint8Array(mem.length + 266 + 5);

    // rk-style checksum
    var cs_hi = 0;
    var cs_lo = 0;

    // microsha-style checksum
    var csm_hi = 0;
    var csm_lo = 0;

    var dptr = 0;
    if (!this.forfile) {
        for (var i = 0; i < 256; ++i) {
            data[dptr++] = 0;
        }
        data[dptr++] = 0xe6;
    }

    data[dptr++] = (org >> 8) & 0xff;
    data[dptr++] = org & 0xff;
    data[dptr++] = ((org + mem.length - 1) >> 8) & 0xff;
    data[dptr++] = (org + mem.length - 1) & 0xff;

    for (var i = 0; i < mem.length; ++i) {
        let octet = mem[i];
        data[dptr++] = octet;
        cs_lo += octet;
        if (i < mem.length - 1) {
            cs_hi += octet + ((cs_lo >> 8) & 0xff);
        }
        cs_lo &= 0xff;

        if (i % 2 === 0) {
            csm_lo ^= octet;
        } else {
            csm_hi ^= octet;
        }
    }

    console.log('checksum rk=', Util.hex8(cs_hi&0xff), Util.hex8(cs_lo&0xff));
    console.log('checksum microsha=', Util.hex8(csm_hi&0xff),
            Util.hex8(csm_lo&0xff));

    if (this.variant === 'mikrosha') {
        data[dptr++] = csm_hi & 0xff;
        data[dptr++] = csm_lo & 0xff;
    } else {
        data[dptr++] = 0;
        data[dptr++] = 0;
    }
    data[dptr++] = 0xe6;

    /* rk86 checksum */
    data[dptr++] = cs_hi & 0xff;
    data[dptr++] = cs_lo & 0xff;
    var end = dptr;
    data[dptr++] = 0;
    data[dptr++] = 0;
    data[dptr++] = 0;
    data[dptr++] = 0;
    data[dptr++] = 0;
    if (this.forfile) {
        this.data = data.slice(0, end);
    } else {
        this.data = data;
    }
    return this;
};
"""
Пожалуйста не делай сокращений и оптимизаций в коде, просто конвертируй один формат в другой, чтобы оно максимально было работоспособным и выглядеть как исходный код на js. так же мне не нужны никаки пояснения - только код
-----------------------------------------------------------------------------------------------
A: ```java
public class TapeFormat {

    private byte[] data;
    private boolean forfile;
    private String variant;

    public TapeFormat(boolean forfile, String variant) {
        this.forfile = forfile;
        this.variant = variant;
    }

    public TapeFormat nekrosha(byte[] mem, int org, String name) {
        byte[] data = new byte[mem.length + 266 + 5];

        int cs_hi = 0;
        int cs_lo = 0;

        int csm_hi = 0;
        int csm_lo = 0;

        int dptr = 0;
        if (!this.forfile) {
            for (int i = 0; i < 256; ++i) {
                data[dptr++] = 0;
            }
            data[dptr++] = (byte) 0xe6;
        }

        data[dptr++] = (byte) ((org >> 8) & 0xff);
        data[dptr++] = (byte) (org & 0xff);
        data[dptr++] = (byte) (((org + mem.length - 1) >> 8) & 0xff);
        data[dptr++] = (byte) ((org + mem.length - 1) & 0xff);

        for (int i = 0; i < mem.length; ++i) {
            byte octet = mem[i];
            data[dptr++] = octet;
            cs_lo += octet;
            if (i < mem.length - 1) {
                cs_hi += octet + ((cs_lo >> 8) & 0xff);
            }
            cs_lo &= 0xff;

            if (i % 2 == 0) {
                csm_lo ^= octet;
            } else {
                csm_hi ^= octet;
            }
        }

        System.out.println("checksum rk=" + hex8(cs_hi & 0xff) + hex8(cs_lo & 0xff));
        System.out.println("checksum microsha=" + hex8(csm_hi & 0xff) + hex8(csm_lo & 0xff));

        if (this.variant.equals("mikrosha")) {
            data[dptr++] = (byte) (csm_hi & 0xff);
            data[dptr++] = (byte) (csm_lo & 0xff);
        } else {
            data[dptr++] = 0;
            data[dptr++] = 0;
        }
        data[dptr++] = (byte) 0xe6;

        /* rk86 checksum */
        data[dptr++] = (byte) (cs_hi & 0xff);
        data[dptr++] = (byte) (cs_lo & 0xff);
        int end = dptr;
        data[dptr++] = 0;
        data[dptr++] = 0;
        data[dptr++] = 0;
        data[dptr++] = 0;
        data[dptr++] = 0;
        if (this.forfile) {
            byte[] croppedData = new byte[end];
            System.arraycopy(data, 0, croppedData, 0, end);
            this.data = croppedData;
        } else {
            this.data = data;
        }
        return this;
    }

    private String hex8(int value) {
        return String.format("%02X", value);
    }
}
```
===============================================================================================

===============================================================================================
Q: У меня есть JS файл мне надо сделать точную копию делающую это на java
"""
/* 4[ 25[00] 25[55] ]  record preamble
 * 16[00]   block preamble
 *  4[55] [E6]
 *      4[00] 25[filename] 2[00]  [hi(addr)] [block count] [block number] [cs0]
 *  4[00] [E6]
 *      [80] [cs0]
 *      32[data] [checksum_data]
 *  4[00] [E6]
 *      [81] [cs0]
 *      32[data] [checksum_data]
 *   . . .
 *  4[00] [E6]
 *      [87] [cs0]
 *      32[data] [checksum_data]
 *
 * Sizes:
 *      record preamble                 =200
 *
 *      one block:
 *          preamble             16
 *          name:                40
 *          data:                40 x 8
 *          total:                      =376
 *      N_blocks = (data size + 255) / 256
 *      Grand Total                     =200 + N_blocks * 376 + end padding 8
 */
TapeFormat.prototype.v06c_rom = function(mem, org, name) {
    var nblocks = Math.trunc((mem.length + 255) / 256);
    var data = new Uint8Array(200 + nblocks * 376 + 64);
    var dofs = 0;
    var sofs = 0;
    /* Preamble */
    for (var i = 0; i < 200; ++i) {
        data[dofs++] = ((Math.trunc(i / 25) % 2) === 0) ? 0x00 : 0x55;
    }

    /* Blocks */
    for (var block = 0; block < nblocks; ++block) {
        /* Checksum of the name subbbbblock */
        var cs0 = 0;

        /* Block preamble */
        for (var i = 0; i < 16; ++i) data[dofs++] = 0;
        /* Name subblock id */
        for (var i = 0; i < 4; ++i) data[dofs++] = 0x55;
        data[dofs++] = 0xE6;
        for (var i = 0; i < 4; ++i) data[dofs++] = 0x00;
        /* Name */
        for (var i = 0; i < 25; ++i) {
            cs0 += data[dofs++] = i < name.length ? name.charCodeAt(i) : 0x20;
        }
        data[dofs++] = data[dofs++] = 0;
        /* High nibble of org address */
        cs0 += data[dofs++] = 0xff & (org >> 8); /* TODO: fix misaligned org */
        /* Block count */
        cs0 += data[dofs++] = nblocks;
        /* Block number */
        cs0 += data[dofs++] = nblocks - block;
        data[dofs++] = cs0 & 0xff;

        /* Now the actual data: 8x32 octets */
        for (var sblk = 0x80; sblk < 0x88; ++sblk) {
            var cs = 0;
            for (var i = 0; i < 4; ++i) data[dofs++] = 0x00;
            data[dofs++] = 0xE6;
            cs += data[dofs++] = sblk;
            cs += data[dofs++] = cs0;
            for (var i = 0; i < 32; ++i) {
                cs += data[dofs++] = sofs < mem.length ? mem[sofs++] : 0;
            }
            data[dofs++] = 0xff & cs;
        }
    }
    this.data = data;
    return this;
};
"""
Пожалуйста не делай оптимизаций в коде, просто конвертируй один формат в другой, чтобы оно максимально было работоспособным и выглядеть как исходный код на js. так же мне не нужны никакие твои пояснения как код работает - только код и уже существующие inline комментарии в нем.

-----------------------------------------------------------------------------------------------
A: ```java
public class TapeFormat {

    private byte[] data;

    public TapeFormat v06c_rom(byte[] mem, int org, String name) {
        int nblocks = (mem.length + 255) / 256;
        byte[] data = new byte[200 + nblocks * 376 + 64];
        int dofs = 0;
        int sofs = 0;

        // Preamble
        for (int i = 0; i < 200; ++i) {
            data[dofs++] = (byte) (((i / 25) % 2) == 0 ? 0x00 : 0x55);
        }

        // Blocks
        for (int block = 0; block < nblocks; ++block) {
            // Checksum of the name subblock
            int cs0 = 0;

            // Block preamble
            for (int i = 0; i < 16; ++i) data[dofs++] = 0;
            // Name subblock id
            for (int i = 0; i < 4; ++i) data[dofs++] = 0x55;
            data[dofs++] = (byte) 0xE6;
            for (int i = 0; i < 4; ++i) data[dofs++] = 0x00;
            // Name
            for (int i = 0; i < 25; ++i) {
                cs0 += data[dofs++] = (byte) (i < name.length() ? name.charAt(i) : 0x20);
            }
            data[dofs++] = data[dofs++] = 0;
            // High nibble of org address
            cs0 += data[dofs++] = (byte) ((0xff & (org >> 8)));
            // Block count
            cs0 += data[dofs++] = (byte) nblocks;
            // Block number
            cs0 += data[dofs++] = (byte) (nblocks - block);
            data[dofs++] = (byte) (cs0 & 0xff);

            // Now the actual data: 8x32 octets
            for (int sblk = 0x80; sblk < 0x88; ++sblk) {
                int cs = 0;
                for (int i = 0; i < 4; ++i) data[dofs++] = 0x00;
                data[dofs++] = (byte) 0xE6;
                cs += data[dofs++] = (byte) sblk;
                cs += data[dofs++] = (byte) cs0;
                for (int i = 0; i < 32; ++i) {
                    cs += data[dofs++] = (sofs < mem.length) ? mem[sofs++] : 0;
                }
                data[dofs++] = (byte) (0xff & cs);
            }
        }
        this.data = data;
        return this;
    }
}
```
===============================================================================================